// Code generated by github.com/tv42/becky -- DO NOT EDIT.

package govue

var _ = IntWrap(asset{Name: "vuescript.js", Content: "" +
	"if (!vm) {\nvm = new Vue({\n    el: '#app', vuetify: new Vuetify(),\n    delimiters: ['${', '}'],\n    data() { return {\n        ctrl: false,\n        socket: null,\n        title: 'Amalus',\n        changed: false,\n        items: [],\n        firstJobs: false,\n        barmode: 0,\n        modes: [ 'M', 'R', 'S' ],\n        modeText: [ 'Materia\u0142y', 'Robocizna', 'Sprz\u0119t' ],\n        modeMap: { M: 'Materia\u0142y', R: 'Robocizna', S: 'Sprz\u0119t' },\n        jobid: -1,\n        jobs: [], jobsDone: [], options: [],\n        viewid: 0,\n        views: [ 'Zlecenia', 'Kosztorys', 'Elementy' ],\n        icons: { 'Zlecenia': 'assignment', 'Kosztorys': 'attach_money', 'Elementy': 'list' },\n        colors: [ 'red', 'pink', 'purple', 'deep-purple', 'indigo', 'blue', 'light-blue',\n            'cyan', 'teal', 'green', 'light-green', 'lime', 'yellow', 'amber',\n            'orange', 'deep-orange', 'brown', 'blue-grey', 'grey' ],\n        optionInfo(i) { return (i.info || '') + ' \\n ' + (i.color || '') },\n        actionsOptions: [\n            { class(j, vm) { return j.color } },\n            { f(j, vm) { vm.$refs.optionEditor.edit(j) }, icon: 'edit' },\n        ],\n        jobheaders: [\n                    { text: '', value: 'icon' },\n                    { text: 'Nazwa', value: 'name', width: '30%' },\n                    { text: 'h', value: 'rx' },\n                    { text: 'z\u0142', value: 'rprice' },\n                    { text: '=', value: 'rtotal' },\n                    { text: 'szt.', value: 'mx' },\n                    { text: 'z\u0142', value: 'mprice' },\n                    { text: '=', value: 'mtotal' },\n                    { text: 'z\u0142', value: 'sprice' },\n                    { text: 'Z', value: 'z' },\n                    { text: 'Razem', value: 'total' },\n                    { text: 'Akcje', value: 'actions', sortable: false } ],\n        jobitems: [],\n        itemheaders: [\n                    { text: '', value: 'icon' },\n                    { text: 'Kategoria', value: 'category' },\n                    { text: 'Nazwa', value: 'name' }, ],\n        categories: {}, category: [], catitems: [], catlist: [], catrefs: [], counted: false,\n        Mcategory: {}, Rcategory: {}, Scategory: {},\n        modAddItem: false, selIcon: false, newItem: {}, selIconFilter: '',\n        itemComms: [ 'Brak', 'Modbus RTU', 'Modbus ASCII', 'Modbus TCP', 'EtherCAT', 'Wi-Fi', 'LoRA' ],\n        modAddCategory: false, newCategory: '',\n        modAddJob: false, newJob: {},\n        actionsJobs: [ { f(j, vm) { vm.$refs.jobEditor.edit(j) }, icon: 'edit' } ],\n        actionsJobsDone: [ { f(j, vm) { vm.jobStatus(j, false) }, icon: 'assignment_returned' } ],\n        actionsClients: [ { f(c, vm) { vm.$refs.clientEditor.edit(c) }, icon: 'edit' } ],\n        removeJobItems: [],\n        modEditor: false, editor: {}, editorSave: {},\n        user: {}, userid: '',\n        signals: [ 'DI', 'DO', 'AIV', 'AOV', 'AImA', 'AOmA', 'Temp' ],\n        signalName: [ null, null, 'AI (0-10V)', 'AO (0-10V)', 'AI (4-20mA)', 'AO (4-20mA)', 'Wej. temp.' ],\n        removed: 0,\n        snack: false, snackText: '', snackColor: 'primary',\n        clients: [],\n        currencies: [ 'PLN', 'EUR', 'USD', 'GBP' ],\n        fieldsJobEditor: [\n            { label: 'Nazwa', model: 'name' },\n            { label: 'Klient', type: 'id', for: 'client', clients: true },\n            { label: 'Lokalizacja', model: 'location' },\n            { label: 'Logo', model: 'logo', picon: 'logo' },\n            { label: 'Opis', model: 'info', type: 'textarea' },\n            { label: 'Zysk', model: 'profit', type: 'slider' },\n        ],\n        fieldsCategoryEditor: [\n            { label: 'Kategoria', type: 'category' },\n            { label: 'Nazwa', model: 'name' },\n        ],\n        fieldsItemEditor: [\n            { label: 'Kategoria', type: 'category' },\n            { label: 'Producent', model: 'maker' },\n            { label: 'Nazwa', model: 'name', picon: 'icon' },\n            { label: 'Opis', model: 'info', type: 'textarea' },\n            { label: 'Koszt', model: 'price', type: 'number', cols: 4, suffix: ' z\u0142' },\n            { label: 'Waluta', model: 'currency', type: 'select', cols: 4, items: 'currencies' },\n            { label: 'Upust', model: 'discount', type: 'number', suffix: ' %', cols: 4 },\n            { label: 'Adres URL', model: 'url' },\n            { label: 'Dokumentacja', model: 'pdf' },\n            { label: 'Sterownik (zapewnia sygna\u0142y)', model: 'plc', type: 'switch' },\n            { flabel(i, vm) { return i.plc ? 'Zapewniane sygna\u0142y' : 'Wymagane sygna\u0142y' }, type: 'divider' },\n            { model: 'DI', type: 'number', cols: 3 },\n            { model: 'DO', type: 'number', cols: 3 },\n            { label: 'AI (0-10V)', model: 'AIV', type: 'number', cols: 3 },\n            { label: 'AO (0-10V)', model: 'AOV', type: 'number', cols: 3 },\n            { label: 'AI (4-20mA)', model: 'AImA', type: 'number', cols: 3 },\n            { label: 'AO (4-20mA)', model: 'AOmA', type: 'number', cols: 3 },\n            { label: 'Wej. temp.', model: 'Temp', type: 'number', cols: 3 },\n            { label: 'Komunikacja', model: 'Comm', type: 'select', items: 'itemComms', cols: 3 },\n        ],\n        fieldsJobItemEditor: [\n            { label: 'Nazwa', model: 'name' },\n            { label: 'Opis', model: 'info', type: 'textarea' },\n            { label: 'Materia\u0142', type: 'divider' },\n            { label: 'Materia\u0142', type: 'id', for: 'M', cols: 8, info: 'Opis', discount: 'Upust' },\n            { label: 'Sztuk', model: 'Mx', type: 'amount', prefix: 'x ', suffix: ' szt.', cols: 4, for: 'M', currency: 'PLN' },\n            { label: 'Robocizna', type: 'divider' },\n            { label: 'Robocizna', type: 'id', for: 'R', cols: 8, info: 'Opis' },\n            { label: 'Godzin', model: 'Rx', type: 'amount', prefix: 'x ', suffix: ' h', cols: 4, for: 'R', currency: 'PLN' },\n            { label: 'Sprz\u0119t', type: 'divider' },\n            { label: 'Sprz\u0119t', type: 'id', for: 'S', info: 'Opis', fcols(i) { return (i.Slist && !i.Spriceset) ? 12 : 8 } },\n            { one: true, type: 'amount', cols: 4, for: 'S', currency: 'PLN' },\n            { label: 'Opcja', type: 'divider' },\n            { label: 'Opcja', type: 'option', model: 'option', items: 'options' },\n        ],\n        fieldsClientEditor: [\n            { label: 'Nazwa', model: 'name' },\n            { label: 'Opis', model: 'info', type: 'textarea' },\n            { label: 'Logo', model: 'logo', picon: 'logo' },\n            { label: 'Mail', model: 'mail' },\n            { label: 'Telefon', model: 'phone' },\n            { label: 'Adres', model: 'address', type: 'textarea' },\n            { label: 'Miejsce', model: 'city' },\n        ],\n        fieldsOptionEditor: [\n            { label: 'Nazwa', model: 'name' },\n            { label: 'Opis', model: 'info', type: 'textarea' },\n            { label: 'Kolor', model: 'color', type: 'color' },\n        ],\n        lang: 'pl',\n        errors: { pl: {\n            'required': 'pole wymagane',\n            'read-only': 'tylko do odczytu',\n        } },\n    } },\n    filters: {\n    },\n    methods: {\n        getOption(id) { return this.options.find(function(o) { return o.id == id }) || {} },\n        saveOption(o) { o.jobid = this.job.id; this.saveSth(o, 'opcj\u0119', '/api/options/') },\n        castBool(o, n) { o[n] = o[n] ? true : false },\n        saveClient(c) { this.saveSth(c, 'klienta', '/api/clients/') },\n        updateProfit(p) {\n            this.job.done = this.job.done ? true : false\n            this.saveSth(this.job, 'zysk', '/api/jobs/', this.fieldsJobEditor, true) },\n            // axios.patch('/api/jobs/' + this.job.id, { profit: this.job.profit })\n                // .then(r => { this.setSnack(\"Zaktualizowano zysk.\") }).catch(e => this.handler(e)) },\n        prepare(o) { delete o._etag; delete o.updated; delete o.created\n            for (let k in o) { if (o[k] === \"\" || o[k] === null) { delete o[k] } } },\n        isImage(s) { if (!s) { return false }; return s.endsWith('png') && s.endsWith('jpg') },\n        E(t) { return (this.errors[this.lang] ? this.errors[this.lang][t] : t) || t },\n        prepareFields(i, fs) { if (!fs) { return }\n            fs.forEach(function(f) {\n                if (f.type == 'number') { i[f.model] = i[f.model] ? Number(i[f.model]) : null }\n                if (f.type == 'switch') { i[f.model] = i[f.model] ? true : false }\n            }) },\n        saveSth(item, what, path, fields, hold) { item.creator = this.user.id; item.creator = this.user.id\n            this.prepareFields(item, fields); this.prepare(item)\n            if (!item.name || item.name.length == 0) { this.setSnack(\"Nazwa jest wymagana!\"); return }\n            if (item.id) {\n                delete item.created\n                axios.put(path + item.id, item).then(r => { this.setSnack('Zaktualizowano ' + what + ': ' + item.name);\n                    if (hold) { return } this.refresh() })\n                .catch(e => this.handler(e, 'Edycja: ' + what))\n            } else {\n                axios.post(path, item).then(r => { this.setSnack('Dodano ' + what + ': ' + item.name); this.refresh(); })\n                .catch(e => this.handler(e, 'Dodawanie: ' + what)) } },\n        saveCategory(c) { c.parent = (this.category && this.category.id ) || 'root'; c.type = this.mode\n            this.saveSth(c, 'kategori\u0119', '/api/categories/') },\n        saveJob(j) { this.castBool(j, 'done'); this.castBool(j, 'clientlist')\n            this.saveSth(j, 'zlecenie', '/api/jobs/') },\n        saveItem(i) { i.type = this.mode; i.category = this.category && this.category.id || 'root'\n            i.Comm = this.itemComms.indexOf(i.Comm)\n            this.saveSth(i, 'przedmiot', '/api/items/', this.fieldsItemEditor) },\n        log(str) { console.log(str) },\n        editItem(i) {},\n        setSnack(txt) { this.snack = true; this.snackText = txt },\n        handler(e, str) { var issues = e && e.response && e.response.data && e.response.data.issues; var E = this.E\n            if (issues) {\n                var i = []\n                for (let k in issues) { issues[k].forEach(function(is) { i.push(k + ' - ' + E(is)) }) }\n                this.setSnack((str ? str + \" - \" : '') + \"B\u0142\u0105d: <br />\" + i.join(', <br />'))\n                return\n            }\n            if (e && e.message) { this.snackText = e.message; this.snack = true }\n            if (e && e.response && e.response.data) { this.snackText += ' - ' + (e.response.data.message || '') } },\n        endEdit() { var e = this.editor; e.Rh = Number(e.Rh); e.Rrate = Number(e.Rrate); e.Sprice = Number(e.Sprice); e.Mx = Number(e.Mx) || 1\n            e.changed = true; this.modEditor = false; this.changed = true },\n        sumSignals(name, col) { var gis = this.getItemSignals; var s = {}; this.jobitems.forEach(function(ji) { gis(ji.Mid, name, s) })\n            if (col) { return s.need > s.have }; return s.need + ' / ' + s.have },\n        getItemSignals(id, name, s) { if (!id || !s) { return }; var i = this.getItem(id); if (!i) { return }; var n = i[name] || 0\n            if (!s.need) { s.need = 0 }; if (!s.have) { s.have = 0 }; if (i.plc) { s.have = s.have + n } else { s.need = s.need + n } },\n        sumJob() { var sum = this.calcZ; var s = 0; this.jobitems.forEach(function(ji) { s = s + sum(ji, true) }); return s.toFixed(2) },\n        sumItem(i) { return this.calcZ(i, true).toFixed(2) + ' z\u0142' },\n        calcZ(i, sum) { if (!i) { return sum ? 0 : '-' }; var r = this.calcR(i, true)\n            var m = i.Mx ? (i.Mx * this.getItem(i.Mid).price / 100) : 0; var p = Number(this.job.profit)\n            var s = Number(i.Sprice) || 0; var t = r + m + s; var z = t * (p ? (p / 100) : 0.1)\n            return sum ? t + z : z.toFixed(2) + ' z\u0142' },\n        calcR(i, raw) { if (!i || !i.Rh || !i.Rrate) { return raw ? 0 : '-' }; return raw ? (i.Rh * i.Rrate) : (i.Rh * i.Rrate) + ' z\u0142' },\n        editJobItem(ji) { if (!ji) { return }; this.editor = ji; Object.assign(this.editorSave, ji); this.modEditor = true },\n        removeJobItem(ji) { if (!ji) { return }; var i = this.jobitems.indexOf(ji); if (i >= 0) {\n            this.removeJobItems.push(ji.id); this.jobitems.splice(i, 1); this.changed = true } },\n        removedJobItem(id) { if (!id) { return } var n = this.removeJobItems.indexOf(id)\n            if (n >= 0) { this.removeJobItems.splice(n, 1) } },\n        getItem(id) { var f = this.items.find(function(i) { return i.id == id }); return f || { name: '-' } },\n        save() { var handler = this.handler; var rji = this.removedJobItem\n            this.removeJobItems.forEach(function(id) { if (!id) { return }; axios.delete('/api/jobitems/' + id).then(r => {\n                var id = r.config.url.replace('/api/jobitems/', ''); rji(id) }).catch(e => { handler(e) }) })\n            this.jobitems.filter(function(ji) { return ji.new }).forEach(function(ji) { delete ji.new; delete ji.id\n                delete ji.changed; axios.post('/api/jobitems', ji)\n                    .then(r => {}).catch(e => { handler(e) }) })\n            this.jobitems.filter(function(ji) { return ji.id && ji.changed && !ji.new }).forEach(function(ji) {\n                delete ji.changed; delete ji._etag; delete ji.created; delete ji.updated\n                ji.Rinfo = ji.Rinfo || ''; ji.Sinfo = ji.Sinfo || ''; ji.info = ji.info || ''\n                axios.patch('/api/jobitems/' + ji.id, ji).then(r => {}).catch(e => { handler(e) }) })\n            this.changed = false; this.refresh() }, // TODO\n        itemToJob(i) { var j = this.jobs[this.jobid]; if (!i || !i.id || !j || !j.id) { return }; this.changed = true\n            this.jobitems.push({ id: i.id + this.jobitems.length + 1,\n                jobid: j.id, Mid: i.id, Mlist: true, Rlist: true, Slist: true, Mx: 1, creator: this.user.id, new: true }) },\n        jobDone() { this.jobStatus(this.jobs[this.jobid], true) }, jobUndone() { this.jobStatus(this.jobs[this.jobid], false) },\n        jobStatus(j, s) { var h = this.handler; axios.patch('/api/jobs/' + j.id, { done: s }).then(r => { this.refresh() }).catch(e => { h(e) }) },\n        jobInfo(i) { return (i.client || '')  + (i.client ? ', ' : '')  + (i.location || '') },\n        setJob(i) { this.jobid = i }, onUpdate(data) { console.log(data) },\n        addJob() { if (!this.newJob || !this.newJob.name || !this.newJob.name.length) { return }; this.newJob.creator = this.user.id\n            var handler = this.handler; axios.post('/api/jobs', this.newJob).then(r => { this.newJob = {}; this.modAddJob = false; this.refresh() })\n                .catch(e => { handler(e) }) },\n        addItem() { if (!this.newItem || !this.newItem.name || !this.newItem.name.length) { return }\n            this.newItem.category = (this.category && this.category.id) ? this.category.id : 'root'\n            this.newItem.Comm = this.itemComms.indexOf(this.newItem.comm)\n            this.newItem.price = this.newItem.pr ? this.newItem.pr * 100 : 0\n            this.newItem.type = this.modes[this.barmode]\n            var ni = this.newItem; ni.Comm = Number(ni.Comm)\n            this.signals.forEach(function(n) { ni[n] = Number(ni[n]) || 0; }); delete this.newItem.pr; ni.creator = this.user.id; var handler = this.handler\n            axios.post('/api/items', this.newItem).then(r => { this.newItem = {}; this.modAddItem = false; this.refresh() })\n                .catch(e => { handler(e) }) },\n        addCategory() { if (!this.newCategory || !this.newCategory.length) { return }; var cat = { name: this.newCategory }\n            cat.parent = (this.category && this.category.id) ? this.category.id : 'root'; cat.creator = this.user.id\n            cat.type = this.modes[this.barmode]; var handler = this.handler\n            axios.post('/api/categories', cat).then(r => { this.newCategory = ''; this.modAddCategory = false; this.refresh() })\n                .catch(e => { handler(e) }) },\n        getPath(c) { var p = []; var r = c; while (r) { p.push(r.orgName || r.name); r = r.parent }; return p.reverse().join(\" &rsaquo; \") },\n        getCategory(id) { return this.catlist.find(function(c) { return c.id == id }) },\n        getPathFromID(id) { var p = []; var r = this.getCategory(id); while (r) { p.push(r.orgName || r.name); r = this.getCategory(r.parent) }\n            return p.length ? p.reverse().join(\" &rsaquo; \") : 'G\u0142\u00f3wna' },\n        setCategory(c) { this.category = c[0]; if (this.category && this.category.id) { var handler = this.handler\n            var type = this.category.type\n            if (type && this[type + 'category']) { this[type + 'category'] = this.category }\n            axios.get('/api/items/?filter={category: \"' + this.category.id + '\"}').then(r => { this.catitems = r.data })\n                .catch(e => { handler(e) }) } },\n        send(trg, d) { this.socket.send(JSON.stringify({ target: trg, data: d })) },\n        updateTitle() { this.title = 'Amalus - ' + (this.job.name || '?'); document.title = this.title },\n        setAddCategory(to, c, parent) { var t = { name: c.name, orgName: c.name, id: c.id, children: [], parent: parent }\n            to.push(t); this.catrefs.push(t); return t },\n        setCategories(c) { var vm = this; vm.categories = {}; var map = {}\n            this.modes.forEach(function(m) { vm.categories[m] = []; })\n            c.forEach(function(r) {\n                if (r.parent == 'root') { map[r.id] = vm.setAddCategory(vm.categories[r.type], r, null) } })\n            c = c.filter(function(r) { return r.parent != 'root' }); var n = 0\n            while(c.length > 0 && n < 1000) { n++; var rem = {}\n                c.forEach(function(r) { var m = map[r.parent]\n                    if (m) { map[r.id] = vm.setAddCategory(m.children, r, m); rem[r.id] = true } })\n                c = c.filter(function(r) { return !rem[r.id] }) } },\n        countItems() { var vm = this; if (!this.items.length || !this.catrefs.length || this.counted) { return }\n            this.catrefs.forEach(function(c) {\n                var n = vm.items.filter(function(i) { return i.category == c.id }).length\n                if (n > 0) { c.name = c.orgName + ' (' + n + ')' } }); this.counted = true },\n        parseItems() { this.countItems(); var c = this.itemComms; this.items.forEach(function(i) { i.Comm = c[i.Comm] }) },\n        refresh() { var handler = this.handler; this.counted = false\n            axios.get('/api/users/' + this.userid).then(r => { this.user = r.data }).catch(e => { handler(e) })\n            axios.get('/api/jobs/?filter={done: false}').then(r => { this.jobs = r.data; this.firstJobs = true })\n                .catch(e => { handler(e) })\n            axios.get('/api/jobs/?filter={done: true}').then(r => { this.jobsDone = r.data }).catch(e => { handler(e) })\n            axios.get('/api/items/').then(r => { this.items = r.data; this.parseItems() }).catch(e => { handler(e) })\n            axios.get('/api/categories/').then(r => { this.setCategories(r.data); this.catlist = r.data; this.countItems() })\n                .catch(e => { handler(e) })\n            axios.get('/api/clients/').then(r => { this.clients = r.data }).catch(e => { handler(e) })\n            if (this.removeJobItems.length == 0) { this.changed = false }\n            if (this.job && this.job.id) {\n                axios.get('/api/jobs/' + this.job.id + '/options/')\n                    .then(r => { this.options = r.data })\n                    .catch(e => { handler(e) })\n            } },\n    },\n    watch: {\n        jobid(id) {\n            var handler = this.handler\n            this.updateTitle()\n            if (!this.jobs[id]) { this.jobitems = []; this.options = []; return }\n            axios.get('/api/jobs/' + this.jobs[id].id + '/items/')\n                .then(r => { this.jobitems = r.data })\n                .catch(e => { handler(e) })\n            axios.get('/api/jobs/' + this.jobs[id].id + '/options/')\n                .then(r => { this.options = r.data })\n                .catch(e => { handler(e) })\n        },\n        viewid(v) { if (v == 1 && (!this.job || !this.job.id)) { this.$refs.view.internalValue = 0; this.setSnack(\"Nie wybrano zlecenia.\") }; this.updateTitle() },\n        removed(n) { if (n == this.removeJobItems.length) { this.removeJobItems = [] } },\n        barmode() { this.category = {} },\n    },\n    computed: {\n        job() { return this.jobs[this.jobid] || {} },\n        view() { return this.views[this.viewid] || '' },\n        matFilterIcons() { var f = this.selIconFilter; if (!f || !f.length) { return this.maticons }\n            return this.maticons.filter(function(v) { return v.includes(f) }) },\n        modeCategories() { return this.categories[this.modes[this.barmode]] },\n        modeItems() { var m = this.modes[this.barmode]; return this.items.filter(function(i) { return i.type == m }); },\n        mode() { return this.modes[this.barmode] },\n        Ritems() { return this.items.filter(function(i) { return i.type == 'R' }) },\n        Mitems() { return this.items.filter(function(i) { return i.type == 'M' }) },\n        Sitems() { return this.items.filter(function(i) { return i.type == 'S' }) },\n        clientitems() { return this.clients },\n        viewcomp() { return 0 },\n    },\n    created() {\n        var self = this\n        axios.defaults.headers.patch['Allow-Patch'] = 'application/json'\n        this.$vuetify.theme.dark = true\n        this.itemComms[-1] = 'N/D'\n        this.userid = user\n        this.maticons = Object.keys(window.maticons)\n        this.socket = glue()\n        this.socket.onMessage(function(e) {\n            console.log('Got: ', e)\n            var obj = JSON.parse(e)\n            if (obj && obj.target) { vm[obj.target] = obj.data }\n        })\n        var handler = this.handler\n        // window.onerror = function(msg, src, line, col, err) { handler({ message: msg }) }\n    },\n    mounted() { this.refresh() },\n})\n}" +
	"", etag: `"NcK/6nb4AwU="`})
